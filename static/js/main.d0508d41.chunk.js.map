{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","console","log","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAaeA,EAXF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcGS,EApBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OAEjB,OACER,EAAAC,EAAAC,cAAA,WAEEM,EAAOC,IACL,SAACC,EAAMC,GACL,OACEX,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAKF,EACLd,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,MACjBC,GAAIS,EAAOG,GAAGZ,SCAbe,EAZG,SAAAlB,GAAiCA,EAA/BmB,YAA+B,IAAlBC,EAAkBpB,EAAlBoB,aAC/B,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVc,KAAK,SACLC,YAAY,eACZC,SAAUH,MCAHI,EAPA,SAACC,GACd,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCyCEC,qBAvCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAPzCX,EAAKY,MAAM,CACThC,OAAQ,GACRO,YAAa,IAEf0B,QAAQC,IAAI,cANDd,mFAWM,IAAAe,EAAAZ,KACjBa,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAM,SAAAG,GAAK,OAAIL,EAAKN,SAAS,CAAC7B,OAAQwC,uCAIjC,IAAAC,EACwBlB,KAAKS,MAA5BhC,EADDyC,EACCzC,OAAQO,EADTkC,EACSlC,YACTmC,EAAe1C,EAAO2C,OAC5B,SAAAC,GACI,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASvC,EAAYsC,iBAGzD,OADAZ,QAAQC,IAAI,aACHlC,EAAO+C,OAGdvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWxC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACuD,EAAD,KACEzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAQ0C,MANpBlD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,oBA3BawD,cCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.d0508d41.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return(\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nconst CardList = ({robots}) => {\n\n  return (\n    <div>\n    {\n      robots.map(\n        (user, i) => {\n          return (\n            <Card\n              key={i}\n              name={robots[i].name}\n              email={robots[i].email}\n              id={robots[i].id}\n            />\n          );\n        })\n    }\n    </div>\n  );\n}\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa2 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robot'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) =>{\n  return (\n    <div style={{ overflowY: 'scroll', border: '8px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n}\nexport default Scroll;\n","import React, {Component} from 'react';\nimport CardList from './../components/CardList';\nimport SearchBox from './../components/SearchBox';\nimport Scroll from './../components/Scroll';\nimport './style/App.css';\n\nclass  App extends Component{\n  constructor(){\n    super();\n    this.state={\n      robots: [],\n      searchfield: '',\n    }\n    console.log(\"I am first\");\n  }\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value});\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( users => this.setState({robots: users}));\n  }\n\n\n  render(){\n    const {robots, searchfield} = this.state;\n    const filteredRobots=robots.filter(\n    robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    console.log(\"rendering\");\n    return (!robots.length) ?\n      <h1 className='tc'> Loading </h1> :\n    (\n      <div className='tc'>\n      <h1 className='f1'>Robo friends</h1>\n      <SearchBox searchChange={this.onSearchChange}/>\n      <Scroll>\n        <CardList robots={filteredRobots} />\n      </Scroll>\n      </div>\n    );\n  };\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}